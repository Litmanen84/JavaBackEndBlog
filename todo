Funzionalità di Login con username O email

Autenticazione/Sicurezza (Authentication Principal)
Optional
JPA repository

Profili Utente: Aggiungere funzionalità per visualizzare e modificare i profili utente.

Permettere a utenti creatori ED Admin di modificare/cancellare commenti

5. Test
Test Unitari: Scrivere test unitari per le singole componenti (controller, servizi, repository).
Test di Integrazione: Scrivere test di integrazione per verificare il funzionamento delle diverse parti dell'applicazione insieme.
6. Documentazione
API Documentation: Usare strumenti come Swagger per documentare le API.
README: Aggiornare il file README.md con istruzioni per il setup e l'uso del progetto.
Struttura Generale delle Classi


CustomUserDetails
package com.example.DenisProj.config;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.User;

import java.util.Collection;

public class CustomUserDetails extends User {
    private final boolean is_admin;

    public CustomUserDetails(String username, String password, Collection<? extends GrantedAuthority> authorities, boolean is_admin) {
        super(username, password, authorities);
        this.is_admin = is_admin;
    }

    public boolean is_admin() {
        return is_admin;
    }
}

CustomUserDetailsService
package com.example.DenisProj.config;

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import com.example.DenisProj.Users.User;
import com.example.DenisProj.Users.UserRepository;

@Service
public class CustomUserDetailsService implements UserDetailsService {

    private final UserRepository userRepository;

    public CustomUserDetailsService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @Override
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new UsernameNotFoundException("User not found with email: " + email));

        return new CustomUserDetails(user.getEmail(), user.getPassword(), user.getAuthorities(), user.getIs_admin());
    }
}


    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {
        return authenticationConfiguration.getAuthenticationManager();
    }
